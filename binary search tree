class Treenode:
    def __init__(self,val):
        self.val=val
        self.left=None
        self.right=None
def insertintoBST(root,val):
    if not root:
        return Treenode(val)
    if val < root.val:
        root.left=insertintoBST(root.left,val)
    else:
        root.right=insertintoBST(root.right,val)
    return root
def constructBST(level):
    if not level:
        return None
    root=Treenode(level[0])
    for i in range(1,len(level)):
        root=insertintoBST(root,level[i])
    return root
def inorderTraversal(root):
    if root:
        inorderTraversal(root.left)
        print(root.val, end=' ')
        inorderTraversal(root.right)
def preorderTraversal(root):
    if root:
        print(root.val, end=' ')
        preorderTraversal(root.left)
        preorderTraversal(root.right)
def postorderTraversal(root):
    if root:
        postorderTraversal(root.left)
        postorderTraversal(root.right)
        print(root.val, end=' ')
level=[7,4,12,3,6,8,1,5,10]
root=constructBST(level)
print("Inorder")
inorderTraversal(root)
print("\npreorder")
preorderTraversal(root)
print("\npostorder")
postorderTraversal(root)
